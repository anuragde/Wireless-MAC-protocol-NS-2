diff -ruN ns-allinone-2.35/ns-2.35/mac/mac-802_11Ext.h ns-allinone-2.35_modified/ns-2.35/mac/mac-802_11Ext.h
--- ns-allinone-2.35/ns-2.35/mac/mac-802_11Ext.h	2011-09-08 11:57:26.000000000 -0400
+++ ns-allinone-2.35_modified/ns-2.35/mac/mac-802_11Ext.h	2016-11-30 14:45:43.984187000 -0500
@@ -62,6 +62,8 @@
 #include "timer-handler.h"
 #define GET_ETHER_TYPE(x)		GET2BYTE((x))
 #define SET_ETHER_TYPE(x,y)            {u_int16_t t = (y); STORE2BYTE(x,&t);}
+               #include <stddef.h>
+
 #include "wireless-phyExt.h"
 
 /* ======================================================================
diff -ruN ns-allinone-2.35/ns-2.35/mac/newmac.cc ns-allinone-2.35_modified/ns-2.35/mac/newmac.cc
--- ns-allinone-2.35/ns-2.35/mac/newmac.cc	1969-12-31 19:00:00.000000000 -0500
+++ ns-allinone-2.35_modified/ns-2.35/mac/newmac.cc	2016-12-18 19:26:52.628735019 -0500
@@ -0,0 +1,411 @@
+
+/*
+ * mac-simple.cc
+ * Copyright (C) 2003 by the University of Southern California
+ * $Id: mac-simple.cc,v 1.8 2010/03/08 05:54:52 tom_henderson Exp $
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ * The copyright of this module includes the following
+ * linking-with-specific-other-licenses addition:
+ *
+ * In addition, as a special exception, the copyright holders of
+ * this module give you permission to combine (via static or
+ * dynamic linking) this module with free software programs or
+ * libraries that are released under the GNU LGPL and with code
+ * included in the standard release of ns-2 under the Apache 2.0
+ * license or under otherwise-compatible licenses with advertising
+ * requirements (or modified versions of such code, with unchanged
+ * license).  You may copy and distribute such a system following the
+ * terms of the GNU GPL for this module and the licenses of the
+ * other code concerned, provided that you include the source code of
+ * that other code when and as the GNU GPL requires distribution of
+ * source code.
+ *
+ * Note that people who make modified versions of this module
+ * are not obligated to grant this special exception for their
+ * modified versions; it is their choice whether to do so.  The GNU
+ * General Public License gives permission to release a modified
+ * version without this exception; this exception also makes it
+ * possible to release a modified version which carries forward this
+ * exception.
+ *
+ */
+
+/* References: Scheduler http://www.isi.edu/nsnam/ns/doc/node32.html
+				default	mac-simple.cc protocol 
+				For random number generation https://wiki.tcl-lang.org/1549
+			For accessing variables : http://www.slideshare.net/TBear76/ns2-binding-c-and-otcl-variables
+*/
+
+#include "ll.h"
+#include "mac.h"
+#include "newmac.h"
+#include "random.h"
+
+// Added by Sushmita to support event tracing (singal@nunki.usc.edu)
+#include "agent.h"
+#include "basetrace.h"
+
+#include "cmu-trace.h"
+
+static class RandomMacNewClass : public TclClass {
+public:
+	RandomMacNewClass() : TclClass("Mac/RandomMacNew") {}
+	TclObject* create(int, const char*const*) {
+		return new RandomMacNew();
+	}
+} class_RandomMacNew;
+
+
+// Added by Sushmita to support event tracing (singal@nunki.usc.edu).
+void RandomMacNew::trace_event(char *eventtype, Packet *p)
+{
+	if (et_ == NULL) return;
+	char *wrk = et_->buffer();
+	char *nwrk = et_->nbuffer();
+
+	hdr_ip *iph = hdr_ip::access(p);
+	char *src_nodeaddr =
+		Address::instance().print_nodeaddr(iph->saddr());
+	char *dst_nodeaddr =
+		Address::instance().print_nodeaddr(iph->daddr());
+
+	if (wrk != 0) 
+	{
+		sprintf(wrk, "E -t "TIME_FORMAT" %s %s %s",
+			et_->round(Scheduler::instance().clock()),
+			eventtype,
+			src_nodeaddr,
+			dst_nodeaddr);
+	}
+	if (nwrk != 0)
+	{
+		sprintf(nwrk, "E -t "TIME_FORMAT" %s %s %s",
+		et_->round(Scheduler::instance().clock()),
+		eventtype,
+		src_nodeaddr,
+		dst_nodeaddr);
+	}
+	et_->dump();
+}
+
+	RandomMacNew::RandomMacNew() : Mac() {
+	rx_state_ = tx_state_ = MAC_IDLE;
+	tx_active_ = 0;
+	waitTimer = new RandomMacNewWaitTimer(this);
+	sendTimer = new RandomMacNewSendTimer(this);
+	recvTimer = new RandomMacNewRecvTimer(this);
+	// Added by Sushmita to support event tracing (singal@nunki.usc.edu)
+	et_ = new EventTrace();
+	busy_ = 0;
+	bind("fullduplex_mode_", &fullduplex_mode_);
+	bind("intervalDuration", &intervalDuration);
+	bind("numRetransmit",&numRetransmit);
+}
+
+// Added by Sushmita to support event tracing (singal@nunki.usc.edu)
+int 
+RandomMacNew::command(int argc, const char*const* argv)
+{
+	if (argc == 3) {
+		if(strcmp(argv[1], "eventtrace") == 0) {
+			et_ = (EventTrace *)TclObject::lookup(argv[2]);
+			return (TCL_OK);
+		}
+	}
+	return Mac::command(argc, argv);
+}
+
+void RandomMacNew::recv(Packet *p, Handler *h) {
+
+	struct hdr_cmn *hdr = HDR_CMN(p);
+	/* let RandomMacNew::send handle the outgoing packets */
+	if (hdr->direction() == hdr_cmn::DOWN) {
+		send(p,h);
+		return;
+	}
+
+	/* handle an incoming packet */
+
+	/*
+	 * If we are transmitting, then set the error bit in the packet
+	 * so that it will be thrown away
+	 */
+	
+	// in full duplex mode it can recv and send at the same time
+	if (!fullduplex_mode_ && tx_active_)
+	{
+		hdr->error() = 1;
+
+	}
+
+	/*
+	 * check to see if we're already receiving a different packet
+	 */
+	
+	if (rx_state_ == MAC_IDLE) {
+		/*
+		 * We aren't already receiving any packets, so go ahead
+		 * and try to receive this one.
+		 */
+		rx_state_ = MAC_RECV;
+		pktRx_ = p;
+		/* schedule reception of the packet */
+		recvTimer->start(txtime(p));
+	} else {
+		/*
+		 * We are receiving a different packet, so decide whether
+		 * the new packet's power is high enough to notice it.
+		 */
+		if (pktRx_->txinfo_.RxPr / p->txinfo_.RxPr
+			>= p->txinfo_.CPThresh) {
+			/* power too low, ignore the packet */
+			Packet::free(p);
+		} else {
+			/* power is high enough to result in collision */
+			rx_state_ = MAC_COLL;
+
+			/*
+			 * look at the length of each packet and update the
+			 * timer if necessary
+			 */
+
+			if (txtime(p) > recvTimer->expire()) {
+				recvTimer->stop();
+				Packet::free(pktRx_);
+				pktRx_ = p;
+				recvTimer->start(txtime(pktRx_));
+			} else {
+				Packet::free(p);
+			}
+		}
+	}
+}
+
+
+double
+RandomMacNew::txtime(Packet *p)
+ {
+	 struct hdr_cmn *ch = HDR_CMN(p);
+	 double t = ch->txtime();
+	 if (t < 0.0)
+	 	t = 0.0;
+	 return t;
+ }
+
+
+
+void RandomMacNew::send(Packet *p, Handler *h)
+{
+
+	double* retransmissionIntervals = new double[numRetransmit];
+	
+
+	hdr_cmn* ch = HDR_CMN(p);
+
+	/* store data tx time */
+ 	ch->txtime() = Mac::txtime(ch->size());
+
+	// Added by Sushmita to support event tracing (singal@nunki.usc.edu)
+	trace_event("SENSING_CARRIER",p);
+	Scheduler& retransmissionScheduler = Scheduler::instance();
+
+	//Random number generation
+	int count=0;
+	while(count<numRetransmit){
+		retransmissionIntervals[count] = intervalDuration * (rand()%40)/40.0 ;
+		count++;
+	}
+
+//Retransmission.
+	int count1=0;
+	while(count1<numRetransmit){
+//fprintf(stdout, "test\n");
+//fprintf(stdout, "---\n");
+			retransmissionScheduler.schedule(this, (Event*)p->copy(),retransmissionIntervals[count1]);
+			count1++;
+	}
+
+
+
+	/* check whether we're idle */
+	if (tx_state_ != MAC_IDLE) {
+		// already transmitting another packet .. drop this one
+		// Note that this normally won't happen due to the queue
+		// between the LL and the MAC .. the queue won't send us
+		// another packet until we call its handler in sendHandler()
+
+		Packet::free(p);
+		return;
+	}
+
+	pktTx_ = p;
+	txHandler_ = h;
+	// rather than sending packets out immediately, add in some
+	// jitter to reduce chance of unnecessary collisions
+	double jitter = Random::random()%40 * 100/bandwidth_;
+
+	if(rx_state_ != MAC_IDLE) {
+		trace_event("BACKING_OFF",p);
+	}
+
+	if (rx_state_ == MAC_IDLE ) {
+		// we're idle, so start sending now
+		waitTimer->restart(jitter);
+		sendTimer->restart(jitter + ch->txtime());
+	} else {
+		// we're currently receiving, so schedule it after
+		// we finish receiving
+		waitTimer->restart(jitter);
+		sendTimer->restart(jitter + ch->txtime()
+				 + HDR_CMN(pktRx_)->txtime());
+	}
+}
+
+
+void RandomMacNew::recvHandler()
+{
+	hdr_cmn *ch = HDR_CMN(pktRx_);
+	Packet* p = pktRx_;
+	MacState state = rx_state_;
+	pktRx_ = 0;
+	int dst = hdr_dst((char*)HDR_MAC(p));
+	
+	//busy_ = 0;
+
+	rx_state_ = MAC_IDLE;
+
+	// in full duplex mode we can send and recv at the same time
+	// as different chanels are used for tx and rx'ing
+	if (!fullduplex_mode_ && tx_active_) {
+		// we are currently sending, so discard packet
+		Packet::free(p);
+	} else if (state == MAC_COLL) {
+		// recv collision, so discard the packet
+		drop(p, DROP_MAC_COLLISION);
+		//Packet::free(p);
+	} else if (dst != index_ && (u_int32_t)dst != MAC_BROADCAST) {
+		
+		/*  address filtering
+		 *  We don't want to log this event, so we just free
+		 *  the packet instead of calling the drop routine.
+		 */
+		Packet::free(p);
+	} else if (ch->error()) {
+		// packet has errors, so discard it
+		//Packet::free(p);
+		drop(p, DROP_MAC_PACKET_ERROR);
+	
+	} else {
+		uptarget_->recv(p, (Handler*) 0);
+	}
+}
+
+void RandomMacNew::waitHandler()
+{
+	tx_state_ = MAC_SEND;
+	tx_active_ = 1;
+
+	downtarget_->recv(pktTx_, txHandler_);
+}
+
+void RandomMacNew::sendHandler()
+{
+	Handler *h = txHandler_;
+	Packet *p = pktTx_;
+
+	pktTx_ = 0;
+	txHandler_ = 0;
+	tx_state_ = MAC_IDLE;
+	tx_active_ = 0;
+
+	//busy_ = 1;
+	//busy_ = 0;
+	
+	
+	// I have to let the guy above me know I'm done with the packet
+	h->handle(p);
+}
+
+
+
+
+//  Timers
+
+void RandomMacNewTimer::restart(double time)
+{
+	if (busy_)
+		stop();
+	start(time);
+}
+
+	
+
+void RandomMacNewTimer::start(double time)
+{
+	Scheduler &s = Scheduler::instance();
+
+	assert(busy_ == 0);
+	
+	busy_ = 1;
+	stime = s.clock();
+	rtime = time;
+	assert(rtime >= 0.0);
+
+	s.schedule(this, &intr, rtime);
+}
+
+void RandomMacNewTimer::stop(void)
+{
+	Scheduler &s = Scheduler::instance();
+
+	assert(busy_);
+	s.cancel(&intr);
+	
+	busy_ = 0;
+	stime = rtime = 0.0;
+}
+
+
+void RandomMacNewWaitTimer::handle(Event *)
+{
+	busy_ = 0;
+	stime = rtime = 0.0;
+
+	mac->waitHandler();
+}
+
+void RandomMacNewSendTimer::handle(Event *)
+{
+	busy_ = 0;
+	stime = rtime = 0.0;
+
+	mac->sendHandler();
+}
+
+void RandomMacNewRecvTimer::handle(Event *)
+{
+	busy_ = 0;
+	stime = rtime = 0.0;
+
+	mac->recvHandler();
+}
+
+//Added new method for handling retransmission
+void RandomMacNew::handle(Event *p)
+{
+	downtarget_->recv((Packet*)p,txHandler_);
+}
diff -ruN ns-allinone-2.35/ns-2.35/mac/newmac.h ns-allinone-2.35_modified/ns-2.35/mac/newmac.h
--- ns-allinone-2.35/ns-2.35/mac/newmac.h	1969-12-31 19:00:00.000000000 -0500
+++ ns-allinone-2.35_modified/ns-2.35/mac/newmac.h	2016-12-18 14:05:26.192476502 -0500
@@ -0,0 +1,144 @@
+
+/*
+ * mac-simple.h
+ * Copyright (C) 2003 by the University of Southern California
+ * $Id: mac-simple.h,v 1.6 2005/08/25 18:58:07 johnh Exp $
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ * The copyright of this module includes the following
+ * linking-with-specific-other-licenses addition:
+ *
+ * In addition, as a special exception, the copyright holders of
+ * this module give you permission to combine (via static or
+ * dynamic linking) this module with free software programs or
+ * libraries that are released under the GNU LGPL and with code
+ * included in the standard release of ns-2 under the Apache 2.0
+ * license or under otherwise-compatible licenses with advertising
+ * requirements (or modified versions of such code, with unchanged
+ * license).  You may copy and distribute such a system following the
+ * terms of the GNU GPL for this module and the licenses of the
+ * other code concerned, provided that you include the source code of
+ * that other code when and as the GNU GPL requires distribution of
+ * source code.
+ *
+ * Note that people who make modified versions of this module
+ * are not obligated to grant this special exception for their
+ * modified versions; it is their choice whether to do so.  The GNU
+ * General Public License gives permission to release a modified
+ * version without this exception; this exception also makes it
+ * possible to release a modified version which carries forward this
+ * exception.
+ *
+ */
+/*
+References: Default mac-simple.h
+
+*/
+#ifndef ns_mac_simple_h
+#define ns_mac_simple_h
+
+// Added by Sushmita to support event tracing (singal@nunki.usc.edu)
+#include "address.h"
+#include "ip.h"
+
+class RandomMacNewWaitTimer;
+class RandomMacNewSendTimer;
+class RandomMacNewRecvTimer;
+
+// Added by Sushmita to support event tracing (singal@nunki.usc.edu)
+class EventTrace;
+
+
+class RandomMacNew : public Mac {
+	//Added by Sushmita to support backoff
+	friend class BackoffTimer;
+public:
+	RandomMacNew();
+	void recv(Packet *p, Handler *h);
+	void send(Packet *p, Handler *h);
+	void handle(Event *p); //added new method handle
+	void waitHandler(void);
+	void sendHandler(void);
+	void recvHandler(void);
+	double txtime(Packet *p);
+
+	// Added by Sushmita to support event tracing (singal@nunki.usc.edu)
+	void trace_event(char *, Packet *);
+	int command(int, const char*const*);
+	EventTrace *et_;
+
+private:
+	Packet *	pktRx_;
+	Packet *	pktTx_;
+        MacState        rx_state_;      // incoming state (MAC_RECV or MAC_IDLE)
+	MacState        tx_state_;      // outgoing state
+        int             tx_active_;
+	int             fullduplex_mode_;
+	Handler * 	txHandler_;
+	RandomMacNewWaitTimer *waitTimer;
+	RandomMacNewSendTimer *sendTimer;
+	RandomMacNewRecvTimer *recvTimer; 
+	int busy_;
+	//Added variable declaration
+	int numRetransmit;
+	double intervalDuration;
+	};
+
+class RandomMacNewTimer: public Handler {
+public:
+	RandomMacNewTimer(RandomMacNew* m) : mac(m) {
+	  busy_ = 0;
+	}
+	virtual void handle(Event *e) = 0;
+	virtual void restart(double time);
+	virtual void start(double time);
+	virtual void stop(void);
+	inline int busy(void) { return busy_; }
+	inline double expire(void) {
+		return ((stime + rtime) - Scheduler::instance().clock());
+	}
+protected:
+	RandomMacNew	*mac;
+	int		busy_;
+	Event		intr;
+	double		stime;
+	double		rtime;
+	double		slottime;
+};
+
+// Timer to use for delaying the sending of packets
+class RandomMacNewWaitTimer: public RandomMacNewTimer {
+public: RandomMacNewWaitTimer(RandomMacNew *m) : RandomMacNewTimer(m) {}
+	void handle(Event *e);
+};
+
+//  Timer to use for finishing sending of packets
+class RandomMacNewSendTimer: public RandomMacNewTimer {
+public:
+	RandomMacNewSendTimer(RandomMacNew *m) : RandomMacNewTimer(m) {}
+	void handle(Event *e);
+};
+
+// Timer to use for finishing reception of packets
+class RandomMacNewRecvTimer: public RandomMacNewTimer {
+public:
+	RandomMacNewRecvTimer(RandomMacNew *m) : RandomMacNewTimer(m) {}
+	void handle(Event *e);
+};
+
+
+
+#endif
